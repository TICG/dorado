<%@ CodeTemplate  Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Description="Generates a DMMIS EntityClass." %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" Category="Context"   Description="Database" %>
<%@ Property Name="NamePlaceName" Type="System.String" Description="This will show up at the bottom of the property grid when the property is selected." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>

<%@ Register Name="ListTemplate" Template="List.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="AddTemplate" Template="Add.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ViewTemplate" Template="View.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="EditTemplate" Template="Edit.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ControllerTemplate" Template="Controller.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="ControllerPartialTemplate" Template="Controller.Partial.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="MenuTemplate" Template="Menu.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="EntityTemplate" Template="Entity.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="TableTemplate" Template="Table.cst" MergeProperties="False" ExcludeProperties="" %>
<%@ Register Name="CacheTemplate" Template="Cache.cst" MergeProperties="False" ExcludeProperties="" %>

<script runat="template">
private string _ListDirectory=string.Empty;
private string _AddDirectory=string.Empty;
private string _ViewDirectory=string.Empty;
private string _EditDirectory=string.Empty;
private string _ControllerDirectory=string.Empty;
private string _MenuDirectory=string.Empty;
private string _EntityDirectory=string.Empty;
private string _TableDirectory=string.Empty;
private string _CacheDirectory=string.Empty;

[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
[Optional,NotChecked]
[DefaultValue("")]
public string CacheOutputDirectory
{
      get {return _CacheDirectory;}
      set {
        if(value.EndsWith("\\"))
        value=value.Substring(0,value.Length-1);
        _CacheDirectory= value;
        }
}

[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
[Optional,NotChecked]
[DefaultValue("")]
public string ListOutputDirectory
{
      get {return _ListDirectory;}
      set {
        if(value.EndsWith("\\"))
        value=value.Substring(0,value.Length-1);
        _ListDirectory= value;
        }
}
[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
[Optional,NotChecked]
[DefaultValue("")]
public string AddOutputDirectory
{
      get {return _AddDirectory;}
      set {
        if(value.EndsWith("\\"))
        value=value.Substring(0,value.Length-1);
        _AddDirectory= value;
        }
}

[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
[Optional,NotChecked]
[DefaultValue("")]
public string ViewOutputDirectory
{
      get {return _ViewDirectory;}
      set {
        if(value.EndsWith("\\"))
        value=value.Substring(0,value.Length-1);
        _ViewDirectory= value;
        }
}

[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
[Optional,NotChecked]
[DefaultValue("")]
public string EditOutputDirectory
{
      get {return _EditDirectory;}
      set {
        if(value.EndsWith("\\"))
        value=value.Substring(0,value.Length-1);
        _EditDirectory= value;
        }
}

[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
[Optional,NotChecked]
[DefaultValue("")]
public string ControllerOutputDirectory
{
      get {return _ControllerDirectory;}
      set {
        if(value.EndsWith("\\"))
        value=value.Substring(0,value.Length-1);
        _ControllerDirectory= value;
        }
}
[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
[Optional,NotChecked]
[DefaultValue("")]
public string MenuOutputDirectory
{
      get {return _MenuDirectory;}
      set {
        if(value.EndsWith("\\"))
        value=value.Substring(0,value.Length-1);
        _MenuDirectory= value;
        }
}
[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
[Optional,NotChecked]
[DefaultValue("")]
public string EntityOutputDirectory
{
      get {return _EntityDirectory;}
      set {
        if(value.EndsWith("\\"))
        value=value.Substring(0,value.Length-1);
        _EntityDirectory= value;
        }
}
[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))]
[Optional,NotChecked]
[DefaultValue("")]
public string TableOutputDirectory
{
      get {return _TableDirectory;}
      set {
        if(value.EndsWith("\\"))
        value=value.Substring(0,value.Length-1);
        _TableDirectory= value;
        }
}
</script>

<script runat="template">
private void GenerateListCode()
{
    ListTemplate template=new ListTemplate();
    foreach(TableSchema table in this.SourceDatabase.Tables)
    {
        string fileDirectory=ListOutputDirectory+"\\"+GetClassName(table.Name)+"\\"+GetShortName(table.Name)+".cshtml";
    template.SetProperty("NamePlaceName",this.NamePlaceName);
    template.SetProperty("SourceTable",table);
        template.RenderToFile(fileDirectory,true);
        
        }
}
private void GenerateAddCode()
{
    AddTemplate template=new AddTemplate();
    foreach(TableSchema table in this.SourceDatabase.Tables)
    {
        if(!table.Description.Contains("view")){
        string fileDirectory=AddOutputDirectory+"\\"+GetClassName(table.Name)+"\\"+GetShortName(table.Name)+"Add.cshtml";
    template.SetProperty("NamePlaceName",this.NamePlaceName);
    template.SetProperty("SourceTable",table);
        template.RenderToFile(fileDirectory,true);
        }
        
        }
}
private void GenerateViewCode()
{
    ViewTemplate template=new ViewTemplate();
    foreach(TableSchema table in this.SourceDatabase.Tables)
    {
        string fileDirectory=ViewOutputDirectory+"\\"+GetClassName(table.Name)+"\\"+GetShortName(table.Name)+"View.cshtml";
    template.SetProperty("NamePlaceName",this.NamePlaceName);
    template.SetProperty("SourceTable",table);
        template.RenderToFile(fileDirectory,true);
        
        }
}
private void GenerateEditCode()
{
    EditTemplate template=new EditTemplate();
    foreach(TableSchema table in this.SourceDatabase.Tables)
    {
         if(!table.Description.Contains("view")){
        string fileDirectory=EditOutputDirectory+"\\"+GetClassName(table.Name)+"\\"+GetShortName(table.Name)+"Edit.cshtml";
    template.SetProperty("NamePlaceName",this.NamePlaceName);
    template.SetProperty("SourceTable",table);
        template.RenderToFile(fileDirectory,true);}
        
        }
}

private void GenerateControllerCode()
{
 ControllerTemplate template=new ControllerTemplate();
    Dictionary<string,List<TableSchema>>  groupTables=GetGroupTables();
    foreach(KeyValuePair<string,List<TableSchema>> table in groupTables){
    string fileDirectory=ControllerOutputDirectory+"\\"+table.Key+"Controller.cs";
    template.SetProperty("NamePlaceName",this.NamePlaceName);
    template.SetProperty("SourceTables",table.Value);
    template.SetProperty("BSName",table.Key);
    template.RenderToFile(fileDirectory,true);
    }
}
 
private void GenerateControllerPartialCode()
{
 ControllerPartialTemplate template=new ControllerPartialTemplate();
    Dictionary<string,List<TableSchema>>  groupTables=GetGroupTables();
    foreach(KeyValuePair<string,List<TableSchema>> table in groupTables){
    string fileDirectory=ControllerOutputDirectory+"\\"+table.Key+"Controller.Partial.cs";
    template.SetProperty("NamePlaceName",this.NamePlaceName);
    template.SetProperty("SourceTables",table.Value);
    template.SetProperty("BSName",table.Key);
    template.RenderToFile(fileDirectory,true);
    }
}
 
private void GenerateMenuCode()
{
 MenuTemplate template=new MenuTemplate();
    Dictionary<string,List<TableSchema>>  groupTables=GetGroupTables();
    string fileDirectory=MenuOutputDirectory+"\\menu.txt";
    template.SetProperty("SourceTables",groupTables);
    template.RenderToFile(fileDirectory,true);
    
}
private void GenerateEntityCode()
{
    EntityTemplate template=new EntityTemplate();
    foreach(TableSchema table in this.SourceDatabase.Tables)
    {string fileDirectory=EntityOutputDirectory+"\\"+table.Name+".cs";
    template.SetProperty("NamePlaceName",this.NamePlaceName);
    template.SetProperty("SourceTable",table);
        template.RenderToFile(fileDirectory,true);
        
    }
}
private void GenerateTableCode()
{
    TableTemplate template=new TableTemplate();
    foreach(TableSchema table in this.SourceDatabase.Tables)
    {string fileDirectory=TableOutputDirectory+"\\T_"+table.Name+".cs";
    template.SetProperty("NamePlaceName",this.NamePlaceName);
    template.SetProperty("SourceTable",table);
        template.RenderToFile(fileDirectory,true);
        
    }
}   

private void GenerateCacheCode()
{
 CacheTemplate template=new CacheTemplate();
    Dictionary<string,List<TableSchema>>  groupTables=GetGroupTables();
    foreach(KeyValuePair<string,List<TableSchema>> table in groupTables){
    string fileDirectory=CacheOutputDirectory+"\\"+table.Key+"CacheProvider.cs";
    template.SetProperty("NamePlaceName",this.NamePlaceName);
    template.SetProperty("SourceTables",table.Value);
    template.SetProperty("BSName",table.Key);
    template.RenderToFile(fileDirectory,true);
    }
}

 
private string GetClassName(string tableName){
    int index=tableName.IndexOf("_");
if(index>-1)
{
    return tableName.Substring(0,index);
}
return "Main";
}
private string GetShortName(string tableName){
    int index=tableName.IndexOf("_");
if(index>-1)
{
    return tableName.Substring(index+1);
}
return tableName;
}
private Dictionary<string,List<TableSchema>> GetGroupTables(){

List<string> groupTables=new List<string>();

foreach(TableSchema table in this.SourceDatabase.Tables)
{
    string bsName=table.Name.Substring(0,table.Name.IndexOf("_"));
    if(!groupTables.Contains(bsName))
      {
          groupTables.Add(bsName);
      }
}
Dictionary<string,List<TableSchema>> groupTables1=new Dictionary<string,List<TableSchema>>();
List<TableSchema> tableList;
foreach(string tableName in groupTables){
    tableList=new List<TableSchema>();
    foreach(TableSchema table in this.SourceDatabase.Tables)
    {
        string bsName=table.Name.Substring(0,table.Name.IndexOf("_"));
        if(tableName==bsName)
        {
            tableList.Add(table);
        }
    }
    groupTables1.Add(tableName,tableList);
}
return groupTables1;
}


</script>
<%
ListOutputDirectory=@"c:\DoradoCode\Interface\";
AddOutputDirectory=@"c:\DoradoCode\Interface\";
ViewOutputDirectory=@"c:\DoradoCode\Interface\";
EditOutputDirectory=@"c:\DoradoCode\Interface\";
ControllerOutputDirectory=@"c:\DoradoCode\Controller\";
MenuOutputDirectory=@"c:\DoradoCode\Menu\";
EntityOutputDirectory=@"c:\DoradoCode\Entity\";
TableOutputDirectory=@"c:\DoradoCode\Table\";
CacheOutputDirectory=@"c:\DoradoCode\Cache\";

Response.WriteLine("\nCode Generate Begin\n");
this.GenerateListCode();
Response.WriteLine("List层代码生成完毕");
Response.WriteLine(new string('-',50));

this.GenerateAddCode();
Response.WriteLine("Add层代码生成完毕");
Response.WriteLine(new string('-',50));

this.GenerateViewCode();
Response.WriteLine("View层代码生成完毕");
Response.WriteLine(new string('-',50));

this.GenerateEditCode();
Response.WriteLine("Edit层代码生成完毕");
Response.WriteLine(new string('-',50));

this.GenerateControllerCode();
Response.WriteLine("Controller代码生成完毕");
Response.WriteLine(new string('-',50));

this.GenerateControllerPartialCode();
Response.WriteLine("Controller扩展代码生成完毕");
Response.WriteLine(new string('-',50));

this.GenerateMenuCode();
Response.WriteLine("菜单代码生成完毕");
Response.WriteLine(new string('-',50));

this.GenerateEntityCode();
Response.WriteLine("Entity代码生成完毕");
Response.WriteLine(new string('-',50));

this.GenerateTableCode();
Response.WriteLine("Table代码生成完毕");
Response.WriteLine(new string('-',50));

this.GenerateCacheCode();
Response.WriteLine("Cache代码生成完毕");
Response.WriteLine(new string('-',50));

Response.WriteLine("\nCode Generate Over");

%>